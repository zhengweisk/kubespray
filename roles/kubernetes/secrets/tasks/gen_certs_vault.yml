---
- include: sync_kube_master_certs.yml
  when: inventory_hostname in groups['kube-master']
  tags: k8s-secrets

- include: sync_kube_node_certs.yml
  when: inventory_hostname in groups['k8s-cluster']
  tags: k8s-secrets

- name: gen_certs_vault | Read in the local credentials
  command: cat /etc/vault/roles/kube/userpass
  register: kube_vault_creds_cat
  delegate_to: "{{ groups['k8s-cluster'][0] }}"

- name: gen_certs_vault | Set facts for read Vault Creds
  set_fact:
    kube_vault_creds: "{{ kube_vault_creds_cat.stdout|from_json }}"
  delegate_to: "{{ groups['k8s-cluster'][0] }}"

- name: gen_certs_vault | Log into Vault and obtain an token
  uri:
    url: "{{ hostvars[groups['vault'][0]]['vault_leader_url'] }}/v1/auth/userpass/login/{{ kube_vault_creds.username }}"
    headers:
      Accept: application/json
      Content-Type: application/json
    method: POST
    body_format: json
    body:
      password: "{{ kube_vault_creds.password }}"
  register: kube_vault_login_result
  delegate_to: "{{ groups['k8s-cluster'][0] }}"

- name: gen_certs_vault | Set fact for Vault API token
  set_fact:
    kube_vault_headers:
      Accept: application/json
      Content-Type: application/json
      X-Vault-Token: "{{ kube_vault_login_result.get('json',{}).get('auth', {}).get('client_token') }}"
  run_once: true

# Issue certs to kube-master nodes
- include: ../../../vault/tasks/shared/issue_cert.yml
  vars:
    issue_cert_copy_ca: "{{ item == kube_master_certs_needed|first }}"
    issue_cert_file_group: "{{ kube_cert_group }}"
    issue_cert_file_owner: kube
    issue_cert_headers: "{{ kube_vault_headers }}"
    issue_cert_hosts: "{{ groups['kube-master'] }}"
    issue_cert_path: "{{ item }}"
    issue_cert_role: kube
    issue_cert_url: "{{ hostvars[groups.vault|first]['vault_leader_url'] }}"
    issue_cert_mount_path: "{{ kube_vault_mount_path }}"
  with_items: "{{ kube_master_certs_needed|d([]) }}"
  when: inventory_hostname in groups['kube-master']

- name: gen_certs_vault | Set fact about certificate alt names
  set_fact:
    kube_cert_alt_names: >-
      {{
      groups['kube-master'] +
      ['kubernetes.default.svc.cluster.local', 'kubernetes.default.svc', 'kubernetes.default', 'kubernetes'] +
      ['localhost']
      }}
  run_once: true

- name: gen_certs_vault | Add external load balancer domain name to certificate alt names
  set_fact:
    kube_cert_alt_names: "{{ kube_cert_alt_names + [apiserver_loadbalancer_domain_name] }}"
  when: loadbalancer_apiserver is defined and apiserver_loadbalancer_domain_name is defined
  run_once: true

- include: ../../../vault/tasks/shared/issue_cert.yml
  vars:
    issue_cert_alt_names: "{{ kube_cert_alt_names }}"
    issue_cert_file_group: "{{ kube_cert_group }}"
    issue_cert_file_owner: kube
    issue_cert_headers: "{{ kube_vault_headers }}"
    issue_cert_hosts: "{{ groups['kube-master'] }}"
    issue_cert_ip_sans: >-
        [
        {%- for host in groups['kube-master']  -%}
        "{{ hostvars[host]['ansible_default_ipv4']['address'] }}",
        {%- if hostvars[host]['ip'] is defined -%}
        "{{ hostvars[host]['ip'] }}",
        {%- endif -%}
        {%- endfor -%}
        "127.0.0.1","::1","{{ kube_apiserver_ip }}"
        ]
    issue_cert_path: "{{ item }}"
    issue_cert_role: kube
    issue_cert_url: "{{ hostvars[groups.vault|first]['vault_leader_url'] }}"
    issue_cert_mount_path: "{{ kube_vault_mount_path }}"
  with_items: "{{ kube_master_components_certs_needed|d([]) }}"
  when: inventory_hostname in groups['kube-master']
  notify: set secret_changed

# Issue node certs to k8s-cluster nodes
- include: ../../../vault/tasks/shared/issue_cert.yml
  vars:
    issue_cert_copy_ca: "{{ item == kube_node_certs_needed|first }}"
    issue_cert_file_group: "{{ kube_cert_group }}"
    issue_cert_file_owner: kube
    issue_cert_headers: "{{ kube_vault_headers }}"
    issue_cert_hosts: "{{ groups['k8s-cluster'] }}"
    issue_cert_path: "{{ item }}"
    issue_cert_role: kube
    issue_cert_url: "{{ hostvars[groups.vault|first]['vault_leader_url'] }}"
    issue_cert_mount_path: "{{ kube_vault_mount_path }}"
  with_items: "{{ kube_node_certs_needed|d([]) }}"
  when: inventory_hostname in groups['k8s-cluster']

- include: ../../../vault/tasks/shared/issue_cert.yml
  vars:
    issue_cert_copy_ca: "{{ item == kube_proxy_certs_needed|first }}"
    issue_cert_file_group: "{{ kube_cert_group }}"
    issue_cert_file_owner: kube
    issue_cert_headers: "{{ kube_vault_headers }}"
    issue_cert_hosts: "{{ groups['k8s-cluster'] }}"
    issue_cert_path: "{{ item }}"
    issue_cert_role: kube
    issue_cert_url: "{{ hostvars[groups.vault|first]['vault_leader_url'] }}"
    issue_cert_mount_path: "{{ kube_vault_mount_path }}"
  with_items: "{{ kube_proxy_certs_needed|d([]) }}"
  when: inventory_hostname in groups['k8s-cluster']
